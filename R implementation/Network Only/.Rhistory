for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.45)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"))
N=100
g=matrix(NA,N,nrow = N,ncol=N)
for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.35)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"))
rm(list=ls())
#goal:initialization for the variational global parameters:
#g should be a real network
# for the time being just some random network to work with
N=100
g=matrix(NA,N,nrow = N,ncol=N)
for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.25)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"))
N=100
g=matrix(NA,N,nrow = N,ncol=N)
for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.05)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"))
N=100
g=matrix(NA,N,nrow = N,ncol=N)
for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.075)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"))
node_num=N
r=5
top_communities = matrix(0,nrow=node_num,ncol=r)
community=rep(0,node_num)
community=1:node_num
for(a in 1:node_num){
gamma=matrix(0,nrow=node_num, ncol=node_num)
gamma[a,]=runif(n = node_num,min = 0,max = 1)
gamma[a,a]=gamma[a,a]+1
community[a]=a
top_communities[a,c]=which(gamma[a,]==sorted[c])
sorted = sort(gamma[a,],decreasing = T)[1:r]
for(c in 1:r){
}
}
#find the neighbor of a person
for(a in 1:node_num){
gamma[a,]=runif(n = node_num,min = 0,max = 1)
gamma[a,a]=gamma[a,a]+1
community[a]=a
sorted = sort(gamma[a,],decreasing = T)[1:r]
for(c in 1:r){
top_communities[a,c]=which(gamma[a,]==sorted[c])
}
}
get_neighbors = function(g,a){
return(which(g[a,]==1))
}
for(i in 1:round(log(node_num))){
for(a in 1:node_num){
for(b in get_neighbors(g,a)){
for(t in top_communities[b,]){
gamma[a,t] = gamma[a,t]+1
}
for(t in top_communities[a,]){
gamma[b,t] = gamma[b,t]+1
}
}
sorted = sort(gamma[a,],decreasing = T)[1:r]
for(c in 1:r){
top_communities[a,c]=which(gamma[a,]==sorted[c])
}
}
}
community_count = rep(0,node_num)
#number of communities
K=node_num
##assuming a and b have link
#still dont' know
approx_post_same_k = function(a,b,k,r){
intersection=intersect(top_communities[a,],top_communities[b,])
if_k = k %in% intersection
prob = length(intersection)/r
c(if_k,prob)
}
##returns community and community_count
for(a in 1:node_num){
for(b in get_neighbors(g,a)){
for(k in 1:node_num){
##we need approximate posterior of two indicators showing same community
##given they have a link
cond = approx_post_same_k(a,b,k,r)
if(cond[1] && cond[2]>=0.5){
community[a]=community[b]=k
}
community_count[k]=length(which(community==2))
}
}
}
table(community)
community_count
rm(list=ls())
#goal:initialization for the variational global parameters:
#g should be a real network
# for the time being just some random network to work with
N=100
g=matrix(NA,N,nrow = N,ncol=N)
for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.075)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"))
node_num=N
##number of top communities to keep
r=5
top_communities = matrix(0,nrow=node_num,ncol=r)
community=rep(0,node_num)
community=1:node_num
gamma=matrix(0,nrow=node_num, ncol=node_num)
for(a in 1:node_num){
gamma[a,]=runif(n = node_num,min = 0,max = 1)
gamma[a,a]=gamma[a,a]+1
community[a]=a
sorted = sort(gamma[a,],decreasing = T)[1:r]
for(c in 1:r){
top_communities[a,c]=which(gamma[a,]==sorted[c])
}
}
#find the neighbor of a person
get_neighbors = function(g,a){
return(which(g[a,]==1))
}
for(i in 1:round(log(node_num))){
for(a in 1:node_num){
for(b in get_neighbors(g,a)){
for(t in top_communities[b,]){
gamma[a,t] = gamma[a,t]+1
}
for(t in top_communities[a,]){
gamma[b,t] = gamma[b,t]+1
}
}
sorted = sort(gamma[a,],decreasing = T)[1:r]
for(c in 1:r){
top_communities[a,c]=which(gamma[a,]==sorted[c])
}
}
}
#just the intial, will polish it later
community_count = rep(0,node_num)
#number of communities
K=node_num
##assuming a and b have link
#still dont' know
approx_post_same_k = function(a,b,k,r){
intersection=intersect(top_communities[a,],top_communities[b,])
if_k = k %in% intersection
prob = length(intersection)/r
c(if_k,prob)
}
##returns community and community_count
for(a in 1:node_num){
for(b in get_neighbors(g,a)){
for(k in 1:node_num){
##we need approximate posterior of two indicators showing same community
##given they have a link
cond = approx_post_same_k(a,b,k,r)
if(cond[1] && cond[2]>=0.5){
community[a]=community[b]=k
}
community_count[k]=length(which(community==2))
}
}
}
table(community)
plot.igraph(graph.adjacency(g,mode = "undirected"),V(g)$size=3)
V(g)
vertex(g)
vertex(g)$size()
plot.igraph(graph.adjacency(g,mode = "undirected"),label.cex=3)
plot.igraph(graph.adjacency(g,mode = "undirected"))
table(community)
community
table(community)
summary(community)
communities(g)
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4)
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
table(community)
community[1:10]
community[1]
community(12)
community[12]
install.packages("lda")
library(lda)
demo(mmsb)
library(igraph)
rm(list=ls())
N=10
g=matrix(NA,N,nrow = N,ncol=N)
for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.075)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.075)
}
diag(g)=0
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
N=10
g=matrix(NA,N,nrow = N,ncol=N)
for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.2)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
N=10
g=matrix(NA,N,nrow = N,ncol=N)
for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.15)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
N=10
g=matrix(NA,N,nrow = N,ncol=N)
for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.15)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
N=10
g=matrix(NA,N,nrow = N,ncol=N)
for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.18)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
N=10
g=matrix(NA,N,nrow = N,ncol=N)
for(i in 1:N){
g[i,i:N]=g[i:N,i]=rbinom(N-i+1,size = 1,prob = 0.2)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
node_num=N
##number of top communities to keep
r=5
top_communities = matrix(0,nrow=node_num,ncol=r)
community=rep(0,node_num)
community=1:node_num
gamma=matrix(0,nrow=node_num, ncol=node_num)
for(a in 1:node_num){
gamma[a,]=runif(n = node_num,min = 0,max = 1)
gamma[a,a]=gamma[a,a]+1
community[a]=a
sorted = sort(gamma[a,],decreasing = T)[1:r]
for(c in 1:r){
top_communities[a,c]=which(gamma[a,]==sorted[c])
}
}
#find the neighbor of a person
get_neighbors = function(g,a){
return(which(g[a,]==1))
}
for(i in 1:round(log(node_num))){
for(a in 1:node_num){
for(b in get_neighbors(g,a)){
for(t in top_communities[b,]){
gamma[a,t] = gamma[a,t]+1
}
for(t in top_communities[a,]){
gamma[b,t] = gamma[b,t]+1
}
}
sorted = sort(gamma[a,],decreasing = T)[1:r]
for(c in 1:r){
top_communities[a,c]=which(gamma[a,]==sorted[c])
}
}
}
#just the intial, will polish it later
community_count = rep(0,node_num)
#number of communities
K=node_num
tau0=rep(1,K)
tau1=rep(1,K)
rm(list=ls())
rbinom(100,size = 20,prob = 0.4)
rbinom(50,size = 20,prob = 0.4)
node_num=50
rbinom(node_num,size = 20,prob = 0.4)
communities = rbinom(node_num,size = 20,prob = 0.4)
indicators=matrix(0, node_num, node_num)
rbinom(node_num,size = 5,prob = 0.4)
rbinom(node_num,size = 5,prob = 0.4)+1
rbinom(node_num,size = 5,prob = 0.4)
rbinom(node_num,size = 4,prob = 0.4)
runif(1,1,4)
rbinom(node_num,size = 4,prob = 0.4)
indicators[i,i:node_num]=g[i:node_num,i]=rbinom(node_num,size = 4,prob = 0.5)
rbinom(node_num,size = 4,prob = 0.5)
rbinom(node_num,size = 4,prob = 0.5)
rbinom(node_num,size = 4,prob = 0.5)
rbinom(node_num,size = 4,prob = 0.5)
rbinom(node_num,size = 4,prob = 0.6)
rbinom(node_num,size = 4,prob = 0.3)
rbinom(node_num,size = 4,prob = 0.6)
table(rbinom(node_num,size = 4,prob = 0.6))
table(rbinom(node_num,size = 4,prob = 0.6))
table(rbinom(node_num,size = 4,prob = 0.6))
table(rbinom(node_num,size = 4,prob = 0.6))
table(sample(1:5,size = node_num,replace = T,prob = c(0.4,0.25,0.20,0.15,.10)))
indicators=matrix(0, node_num, node_num)
for(i in 1:node_num){
indicators[i,i:node_num]=g[i:node_num,i]=sample(1:5,size = node_num,replace = T,prob = c(0.4,0.25,0.20,0.15,.10))
}
for(i in 1:node_num){
indicators[i,i:node_num]=indicators[i:node_num,i]=sample(1:5,size = node_num,replace = T,prob = c(0.4,0.25,0.20,0.15,.10))
}
sample(1:5,size = node_num,replace = T,prob = c(0.4,0.25,0.20,0.15,.10))
length(sample(1:5,size = node_num,replace = T,prob = c(0.4,0.25,0.20,0.15,.10)))
node_num=50
indicators=matrix(0, nrow=node_num, ncol=node_num)
for(i in 1:node_num){
indicators[i,i:node_num]=indicators[i:node_num,i]=
}
for(i in 1:node_num){
indicators[i,i:node_num]=indicators[i:node_num,i]=sample(1:5,size = node_num,replace = T,prob = c(0.4,0.25,0.20,0.15,.10))
}
for(i in 1:node_num){
indicators[i,]=sample(1:5,size = node_num,replace = T,prob = c(0.4,0.25,0.20,0.15,.10))
}
View(indicators)
g=matrix(NA,nrow = node_num,ncol=node_num)
for(i in 1:node_num){
g[i,i:node_num]=g[i:node_num,i]=rbinom(node_num-i+1,size = 1,prob = 0.2)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
g=matrix(NA,nrow = node_num,ncol=node_num)
for(i in 1:node_num){
g[i,i:node_num]=g[i:node_num,i]=rbinom(node_num-i+1,size = 1,prob = 0.15)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
g=matrix(NA,nrow = node_num,ncol=node_num)
for(i in 1:node_num){
g[i,i:node_num]=g[i:node_num,i]=rbinom(node_num-i+1,size = 1,prob = 0.1)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
g=matrix(NA,nrow = node_num,ncol=node_num)
for(i in 1:node_num){
g[i,i:node_num]=g[i:node_num,i]=rbinom(node_num-i+1,size = 1,prob = 0.15)
}
diag(g)=0
#test to see if symmetric
plot.igraph(graph.adjacency(g,mode = "undirected"),vertex.size=4,layout=layout_with_fr)
for(a in 1:node_nume){
for(b in 1:node_num){
if(g[a,b]==1){
indicators[b,a]=indicators[b,a]
}
}
}
for(a in 1:node_num){
for(b in 1:node_num){
if(g[a,b]==1){
indicators[b,a]=indicators[b,a]
}
}
}
get_neighbors = function(g,a){
return(which(g[a,]==1))
}
print(node_num,"ss")
print(node_num,"ss")
print(node_num+"ss")
print(paste(node_num "\t ss"))
print(paste(node_num, "\t ss"))
for(a in 1:node_num){
for(b in get_neighbors(g,a)){
print(paste(indicators[a,b],  "    "))
}
print("\n")
}
tau0=rep(1,K)
tau1=rep(1,K)
K=5
tau0=rep(1,K)
tau1=rep(1,K)
gamma = matrix(0, nrow=node_num,ncol=K)
indicators[1,get_neighbors(g,1)]
unlist(summary(indicators[1,get_neighbors(g,1)]))
unlist(table(indicators[1,get_neighbors(g,1)]))
(table(indicators[1,get_neighbors(g,1)]))
(table(indicators[1,get_neighbors(g,1)]))[1]
(table(indicators[1,get_neighbors(g,1)]))[2]
(table(indicators[1,get_neighbors(g,1)]))[3]
(table(indicators[1,get_neighbors(g,1)]))[4]
(table(indicators[1,get_neighbors(g,1)]))[1,1]
(table(indicators[1,get_neighbors(g,1)]))[1][1]
(table(indicators[1,get_neighbors(g,1)]))[1][[2]]
(table(indicators[1,get_neighbors(g,1)]))[1]
(table(indicators[1,get_neighbors(g,1)]))[[1]]
(table(indicators[1,get_neighbors(g,1)]))[[2]]
data(table(indicators[1,get_neighbors(g,1)]))
data.frame(table(indicators[1,get_neighbors(g,1)]))
table(indicators[1,get_neighbors(g,1)])
table(indicators[2,get_neighbors(g,2)])
table(indicators[3,get_neighbors(g,3)])
table(indicators[10,get_neighbors(g,10)])
indicators[1,get_neighbors(g,1)]
x=indicators[1,get_neighbors(g,1)]
which(x==1)
length(which(x==1))
length(which(x==2))
length(which(x==3))
length(which(x==4))
length(which(x==5))
x=indicators[10,get_neighbors(g,10)]
length(which(x==5))
length(which(x==4))
length(which(x==3))
length(which(x==2))
length(which(x==1))
sum=0
for(i=1:K){
sum = sum+length(which(x==k))
}
freq=rep(0,K)
for(i=1:K){
freq[k] = freq[k]/sum
}
sum=0
x=indicators[10,get_neighbors(g,10)]
sum=0
for(i=1:K){
sum = sum+length(which(x==k))
}
for(i=1:K){
sum = sum+length(which(x==k)
}
sum=0
for(i=1:K){
sum = sum+length(which(x==k))
}
x=indicators[10,get_neighbors(g,10)]
sum=0
for(k in 1:K){
sum = sum+length(which(x==k))
}
freq=rep(0,K)
for(k in 1:K){
freq[k] = freq[k]/sum
}
freq
x=indicators[10,get_neighbors(g,10)]
sum=0
for(k in 1:K){
sum = sum+length(which(x==k))
}
freq=rep(0,K)
for(k in 1:K){
freq[k] = length(which(x==k))/sum
}
freq
for(a in 1:node_num){
x= indicators[a,get_neighbors(g,a)]
sum=0
for(k in 1:K){
sum = sum+length(which(x==k))
}
for(k in 1:K){
gamma[a,k] = length(which(x==k))/sum
}
}
View(gamma)
runif(1,0,0.1)
gamma = gamma+runif(1,0,0.1)
View(gamma)
setwd("C:/Users/56592aya/Dropbox/Arash/EUR/Workspace/CLSM/R implementation/Network Only")
if(!require(igraph)){
install.packages("igraph")
}
if(!require(gtools)){
install.packages("gtools")
}
