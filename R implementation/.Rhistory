#LOCAL VARIATIONAL PARAMETER INIT
phi=local.init(links,K)
phi.links=phi[[1]]
phi.nonlinks=phi[[2]]
##CONVERGENCE AND UDATE LOOP(VI)
while(!(CONVERGED) || !(iteration>MAX_ITER)){
cat(paste("iteration ",iteration,":\n"))
#LOCAL UPDATE
phi.links[,1:K] = phi.links.update(links, gamma, tau0, tau1)
phi.nonlinks=phi.nonlinks.update(phi.links,neighbors)
#TEST:rowSums(phi.links[,-c(ncol(phi.links)-1, ncol(phi.links))])
#TEST:rowSums(phi.nonlinks)
#GLOBAL UPDATE
gamma=gamma.update(gamma,alpha,phi.links, phi.nonlinks, neighbors)
tau0=tau0.update(phi.links,eta0)
tau1=tau1.update(phi.nonlinks,links,eta1)
#WRITING TO FILE
# fileConn<-file(paste(iteration, "--output.txt"))
# writeLines(gamma[1,], fileConn)
# close(fileConn)
#CHECKING CONVERGENCE
if(iteration %% 10 ==0){
cat("computing ELBO...\n")
ELBO[ELBO.count]=
compute.ELBO.E(neighbors = neighbors,
nonneighbors = nonneighbors,
alpha = alpha, eta0 = eta0,
eta1 = eta1,tau0 = tau0, tau1 = tau1,
gamma = gamma,phi.links = phi.links,
phi.nonlinks = phi.nonlinks,
links=links,eps=epsilon)
cat(paste("ELBO is ",ELBO[ELBO.count],"\n"))
if(abs(ELBO[ELBO.count]-ELBO[ELBO.count-1]) < min.threshold){
CONVERGED=TRUE
cat("ELBO has converged!!!\n")
break;
}
ELBO.count=ELBO.count+1
}
iteration=iteration+1
if(iteration >= MAX_ITER){
cat("MAX_ITER reached and not converged:(!!\n")
break;
}
}
ELBO=ELBO[-1] #throws away the 0 in the beginning
#PLOT OF THE ELBO
plot(1:length(ELBO),ELBO,type = 'l') # ELBO
estimate.beta <- function(tau0, tau1){
beta.rate= rep(0, K)
for(k in 1:K){
sum.0=0
sum.0=sum.0+tau0[k]+tau1[k]
beta.rate[k]=tau0[k]/sum.0
}
return(beta.rate)
}
estimate.theta <- function(gamma){
theta=matrix(0, nrow=N, ncol=K)
for(a in 1:N){
sum=0
for(k in 1:K){
sum=sum+gamma[a,k]
}
for(k in 1:K){
theta[a,k]=gamma[a,k]/sum
}
}
return(theta)
}
beta.estimate = estimate.beta(tau0, tau1)
theta.estimate=estimate.theta(gamma)
test.beta = matrix(diag(beta.estimate))
test.beta = diag(beta.estimate)
ones=matrix(1, nrow=K, ncol=K)
eyes=diag(K)
beta.estimate = estimate.beta(tau0, tau1)
theta.estimate=estimate.theta(gamma)
genr.mem.indicators <- function(i,j, Theta){
K= dim(Theta)[2]
z.i = rep(0,K)
x=rmultinom(n = 1,  size=K,prob = Theta[i,])
zi.idx=which(x==max(x))
if(length(zi.idx>1)){
max.idx=zi.idx[1]
max=Theta[i,max.idx]
for(idx in zi.idx){
if(Theta[i,idx] > max){
max.idx=idx
max=Theta[i,idx]
}
}
}
z.i[max.idx]=1
zi.idx=max.idx
###
z.j = rep(0,K)
x=rmultinom(n = 1,  size=K,prob = Theta[j,])
zj.idx=which(x==max(x))
if(length(zj.idx>1)){
max.idx=zj.idx[1]
max=Theta[j,max.idx]
for(idx in zj.idx){
if(Theta[j,idx] > max){
max.idx=idx
max=Theta[j,idx]
}
}
}
z.j[max.idx]=1
zj.idx=max.idx
return(list(zi=z.i, zj=z.j, zi.idx=zi.idx, zj.idx=zj.idx))
}
genr.y <- function(i,j, zi.idx, zj.idx, Beta){
return(rbinom(1, 1, Beta[zi.idx,zj.idx]))
}
test.Y=matrix(0,nrow=N, ncol=N)
test.Z = array(0, dim=c(N,N,K))
test.beta = diag(beta.estimate)
ones=matrix(1, nrow=K, ncol=K)
eyes=diag(K)
test.beta = test.beta+epsilon*(ones-eyes)
test.theta=theta.estimate
for(i in 1:N){
for(j in 1:N){
if(i < j){
####BEGIN
z=genr.mem.indicators(i,j, test.theta)
z[[1]]
z[[2]]
z[[3]]
test.Z[i,j,]=z[[1]]
test.Z[j,i,]=z[[2]]
zi.idx=z[[3]]
zj.idx=z[[4]]
test.Y[i,j]=test.Y[j,i]=genr.y(i,j,zi.idx, zj.idx, test.beta)
}
}
}
test.community.in = matrix(0, nrow = N, ncol=K)
test.community.out = matrix(0, nrow = N, ncol=K)
for(a in 1:N){
for (k in 1:K){
if(sum(test.Z[a,,k])>0){
test.community.out[a,k]=1
}else if(sum(test.Z[,a,k])>0){
test.community.in[a,k]=1
}
else{
test.community.in[a,k]=test.community.out[a,k]=0
}
}
}
length(which(test.community.in[,1]==1))
length(which(test.community.in[,2]==1))
length(which(test.community.in[,3]==1))
length(which(test.community.in[,4]==1))
length(which(test.community.in[,5]==1))
length(which(test.community.in[,1]==1))
length(which(community.in[,1]==1))
length(which(test.community.in[,2]==1))
length(which(community.in[,2]==1))
length(which(test.community.in[,3]==1))
length(which(community.in[,3]==1))
length(which(test.community.in[,4]==1))
length(which(community.in[,4]==1))
length(which(test.community.in[,5]==1))
length(which(community.in[,5]==1))
intersect(which(test.community.in[,1]==1), which(community.in[,1]==1))
length(intersect(which(test.community.in[,1]==1), which(community.in[,1]==1)))
length(intersect(which(test.community.in[,1]==1), which(community.in[,1]==1)))
length(which(test.community.in[,1]==1))
length(which(community.in[,1]==1))
length(intersect(which(test.community.in[,1]==1), which(community.in[,1]==1)))
length(which(test.community.in[,2]==1))
length(which(community.in[,2]==1))
length(intersect(which(test.community.in[,2]==1), which(community.in[,2]==1)))
length(which(test.community.in[,3]==1))
length(which(community.in[,3]==1))
length(intersect(which(test.community.in[,3]==1), which(community.in[,3]==1)))
length(which(test.community.in[,4]==1))
length(which(community.in[,4]==1))
length(intersect(which(test.community.in[,4]==1), which(community.in[,4]==1)))
length(which(test.community.in[,5]==1))
length(which(community.in[,5]==1))
length(intersect(which(test.community.in[,5]==1), which(community.in[,5]==1)))
length(intersect(which(test.community.in[,3]==1), which(community.in[,3]==1)))
length(which(test.community.in[,4]==1))
length(which(community.in[,4]==1))
length(intersect(which(test.community.in[,4]==1), which(community.in[,4]==1)))
length(which(test.community.in[,5]==1))
length(intersect(which(test.community.in[,4]==1), which(community.in[,4]==1)))
length(intersect(which(test.community.in[,1]==1), which(community.in[,1]==1)))/
length(which(test.community.in[,1]==1))
#length(which(community.in[,2]==1))
length(intersect(which(test.community.in[,2]==1), which(community.in[,2]==1)))/
length(which(test.community.in[,2]==1))
#length(which(community.in[,3]==1))
length(intersect(which(test.community.in[,3]==1), which(community.in[,3]==1)))/
length(which(test.community.in[,3]==1))
#length(which(community.in[,4]==1))
length(intersect(which(test.community.in[,4]==1), which(community.in[,4]==1)))/
length(which(test.community.in[,4]==1))
#length(which(community.in[,5]==1))
length(intersect(which(test.community.in[,5]==1), which(community.in[,5]==1)))/
length(which(test.community.in[,5]==1))
plot.igraph(graph.adjacency(adj.matrix,mode = "undirected"),vertex.size=1,layout=layout_with_fr)
plot.igraph(graph.adjacency(adj.matrix,mode = "undirected"),vertex.size=1,layout=layout_with_f
plot.igraph(graph.adjacency(adj.matrix,mode = "undirected"),vertex.size=1,layout=layout_with_f)
plot.igraph(graph.adjacency(adj.matrix,mode = "undirected"),vertex.size=1,layout=layout_with_f)
plot.igraph(graph.adjacency(adj.matrix,mode = "undirected"),vertex.size=1,layout=layout_with_fr)
plot.igraph(graph.adjacency(test.Y,mode = "undirected"),vertex.size=1,layout=layout_with_fr)
plot.igraph(graph.adjacency(adj.matrix,mode = "undirected"),vertex.size=1,layout=layout_with_fr)
plot.igraph(graph.adjacency(test.Y,mode = "undirected"),vertex.size=1,layout=layout_with_fr)
intersection(graph.adjacency(test.Y), graph.adjacency(adj.matrix))
g.intersect=intersection(graph.adjacency(test.Y), graph.adjacency(adj.matrix))
g.intersect=intersection(graph.adjacency(test.Y, mode = "undirected"), graph.adjacency(adj.matrix))
g.intersect=intersection(graph.adjacency(test.Y,mode="undirected"), graph.adjacency(adj.matrix,mode="undirected"))
plot.igraph(g.intersect,vertex.size=1,layout=layout_with_fr)
plot.igraph(graph.adjacency(test.Y,mode = "undirected"),vertex.size=1,layout=layout_with_fr)
plot.igraph(graph.adjacency(adj.matrix,mode = "undirected"),vertex.size=1,layout=layout_with_fr)
plot.igraph(g.intersect,vertex.size=1,layout=layout_with_fr)
degree(g.intersect)
sum(degree(g.intersect))
sum(degree(g.intersect))/2
sum(degree(graph.adjacency(adj.matrix,mode="undirected")))
sum(degree(graph.adjacency(adj.matrix,mode="undirected")))/2
sum(degree(g.intersect))/2
sum(degree(graph.adjacency(adj.matrix,mode="undirected")))/2
(sum(degree(g.intersect)))/sum(degree(graph.adjacency(adj.matrix,mode="undirected")))
(sum(degree(g.intersect)))/sum(degree(graph.adjacency(adj.matrix,mode="undirected")))
rm(list=ls())
options(digits=10)
source("genr_network.R")
N=50;K.true=5
eta0 = 10.0
eta1 = 1.0
alpha=rep(1/K.true, K.true)
net=genr_network(alpha = alpha, N = N, eta0 = eta0, eta1 = eta1)
adj.matrix=net$net
zindicator=net$indicator
zindicator[,,1]
plot.igraph(graph.adjacency(adj.matrix,mode = "undirected"),vertex.size=1,layout=layout_with_fr)
source("global_init.R")
source("generic_funcs.R")
source("local_init.R")
source("local_update.R")
source("global_update.R")
source("ELBO.R")
source("param_init.R")
options(digits = 10)
neighbors = get.static.neighbors(adj.matrix)
links=get.links(N = N, neighbors = neighbors, adj.matrix = adj.matrix)#X1 always < X2
nonneighbors=get.static.nonneighbors(adj.matrix)
nonlinks=get.nonlinks(N = N, nonneighbors = nonneighbors)
epsilon=1e-30
CONVERGED=FALSE
#MAX_ITER=65536
MAX_ITER=1000
iteration=1
ELBO.count = 2
min.threshold = 10^(-8)
ELBO=c(0)
K = K.true###now just for testing
hyper.param.init <- random.param.init(eta0=eta0, eta1=eta1, K=K)
alpha=hyper.param.init$alpha
eta0=hyper.param.init$eta0
eta1=hyper.param.init$eta1
gamma=matrix(runif(N*model.K),nrow=N, ncol=model.K)
rm(list=ls())
options(digits=10)
source("genr_network.R")
N=50;K.true=5
eta0 = 10.0
eta1 = 1.0
alpha=rep(1/K.true, K.true)
net=genr_network(alpha = alpha, N = N, eta0 = eta0, eta1 = eta1)
adj.matrix=net$net
zindicator=net$indicator
zindicator[,,1]
plot.igraph(graph.adjacency(adj.matrix,mode = "undirected"),vertex.size=1,layout=layout_with_fr)
model.K = K.true
community.in = matrix(0, nrow = N, ncol=K.true)
community.out = matrix(0, nrow = N, ncol=K.true)
for(a in 1:N){
for (k in 1:K.true){
if(sum(zindicator[a,,k])>0){
community.out[a,k]=1
}else if(sum(zindicator[,a,k])>0){
community.in[a,k]=1
}
else{
community.in[a,k]=community.out[a,k]=0
}
}
}
length(which(community.in[,1]==1))
length(which(community.in[,2]==1))
length(which(community.in[,3]==1))
length(which(community.in[,4]==1))
length(which(community.in[,5]==1))
community.in
community.out
source("global_init.R")
source("generic_funcs.R")
source("local_init.R")
source("local_update.R")
source("global_update.R")
source("ELBO.R")
source("param_init.R")
#SET UP ENVIRONMENT
options(digits = 10)
#get list of neighbors for each individual
neighbors = get.static.neighbors(adj.matrix)
#get all the unique undirected edges
links=get.links(N = N, neighbors = neighbors, adj.matrix = adj.matrix)#X1 always < X2
#get the list of nonneighbors for each individual
nonneighbors=get.static.nonneighbors(adj.matrix)
#get all the undirected missing edges
nonlinks=get.nonlinks(N = N, nonneighbors = nonneighbors)
epsilon=1e-30
CONVERGED=FALSE
#MAX_ITER=65536
MAX_ITER=1000
iteration=1
ELBO.count = 2
min.threshold = 10^(-8)
ELBO=c(0)
#INITIALIZATIONS
K = K.true###now just for testing
#HYPERPARAM INIT
hyper.param.init <- random.param.init(eta0=eta0, eta1=eta1, K=K)
alpha=hyper.param.init$alpha
eta0=hyper.param.init$eta0
eta1=hyper.param.init$eta1
#GLOBAL VARIATIONAL PARAMETER INIT
g.init = global.random.init(adj.matrix,model.K = K.true,
eps=epsilon, eta0=eta0, eta1=eta1)
gamma=g.init$gamma.init
beta=g.init$beta.init
tau0=g.init$tau0.init
tau1=g.init$tau1.init
#LOCAL VARIATIONAL PARAMETER INIT
phi=local.init(links,K)
phi.links=phi[[1]]
phi.nonlinks=phi[[2]]
##CONVERGENCE AND UDATE LOOP(VI)
while(!(CONVERGED) || !(iteration>MAX_ITER)){
cat(paste("iteration ",iteration,":\n"))
#LOCAL UPDATE
phi.links[,1:K] = phi.links.update(links, gamma, tau0, tau1)
phi.nonlinks=phi.nonlinks.update(phi.links,neighbors)
#TEST:rowSums(phi.links[,-c(ncol(phi.links)-1, ncol(phi.links))])
#TEST:rowSums(phi.nonlinks)
#GLOBAL UPDATE
gamma=gamma.update(gamma,alpha,phi.links, phi.nonlinks, neighbors)
tau0=tau0.update(phi.links,eta0)
tau1=tau1.update(phi.nonlinks,links,eta1)
#WRITING TO FILE
# fileConn<-file(paste(iteration, "--output.txt"))
# writeLines(gamma[1,], fileConn)
# close(fileConn)
#CHECKING CONVERGENCE
if(iteration %% 10 ==0){
cat("computing ELBO...\n")
ELBO[ELBO.count]=
compute.ELBO.E(neighbors = neighbors,
nonneighbors = nonneighbors,
alpha = alpha, eta0 = eta0,
eta1 = eta1,tau0 = tau0, tau1 = tau1,
gamma = gamma,phi.links = phi.links,
phi.nonlinks = phi.nonlinks,
links=links,eps=epsilon)
cat(paste("ELBO is ",ELBO[ELBO.count],"\n"))
if(abs(ELBO[ELBO.count]-ELBO[ELBO.count-1]) < min.threshold){
CONVERGED=TRUE
cat("ELBO has converged!!!\n")
break;
}
ELBO.count=ELBO.count+1
}
iteration=iteration+1
if(iteration >= MAX_ITER){
cat("MAX_ITER reached and not converged:(!!\n")
break;
}
}
ELBO=ELBO[-1] #throws away the 0 in the beginning
#PLOT OF THE ELBO
plot(1:length(ELBO),ELBO,type = 'l') # ELBO
plot(3:length(ELBO),ELBO[3:length(ELBO)],type = 'l') # ELBO
estimate.beta <- function(tau0, tau1){
beta.rate= rep(0, K)
for(k in 1:K){
sum.0=0
sum.0=sum.0+tau0[k]+tau1[k]
beta.rate[k]=tau0[k]/sum.0
}
return(beta.rate)
}
estimate.theta <- function(gamma){
theta=matrix(0, nrow=N, ncol=K)
for(a in 1:N){
sum=0
for(k in 1:K){
sum=sum+gamma[a,k]
}
for(k in 1:K){
theta[a,k]=gamma[a,k]/sum
}
}
return(theta)
}
beta.estimate = estimate.beta(tau0, tau1)
theta.estimate=estimate.theta(gamma)
genr.mem.indicators <- function(i,j, Theta){
K= dim(Theta)[2]
z.i = rep(0,K)
x=rmultinom(n = 1,  size=K,prob = Theta[i,])
zi.idx=which(x==max(x))
if(length(zi.idx>1)){
max.idx=zi.idx[1]
max=Theta[i,max.idx]
for(idx in zi.idx){
if(Theta[i,idx] > max){
max.idx=idx
max=Theta[i,idx]
}
}
}
z.i[max.idx]=1
zi.idx=max.idx
###
z.j = rep(0,K)
x=rmultinom(n = 1,  size=K,prob = Theta[j,])
zj.idx=which(x==max(x))
if(length(zj.idx>1)){
max.idx=zj.idx[1]
max=Theta[j,max.idx]
for(idx in zj.idx){
if(Theta[j,idx] > max){
max.idx=idx
max=Theta[j,idx]
}
}
}
z.j[max.idx]=1
zj.idx=max.idx
return(list(zi=z.i, zj=z.j, zi.idx=zi.idx, zj.idx=zj.idx))
}
genr.y <- function(i,j, zi.idx, zj.idx, Beta){
return(rbinom(1, 1, Beta[zi.idx,zj.idx]))
}
test.Y=matrix(0,nrow=N, ncol=N)
test.Z = array(0, dim=c(N,N,K))
test.beta = diag(beta.estimate)
ones=matrix(1, nrow=K, ncol=K)
eyes=diag(K)
test.beta = test.beta+epsilon*(ones-eyes)
test.theta=theta.estimate
#3)Z indicators
for(i in 1:N){
for(j in 1:N){
if(i < j){
####BEGIN
z=genr.mem.indicators(i,j, test.theta)
z[[1]]
z[[2]]
z[[3]]
test.Z[i,j,]=z[[1]]
test.Z[j,i,]=z[[2]]
zi.idx=z[[3]]
zj.idx=z[[4]]
test.Y[i,j]=test.Y[j,i]=genr.y(i,j,zi.idx, zj.idx, test.beta)
}
}
}
test.community.in = matrix(0, nrow = N, ncol=K)
test.community.out = matrix(0, nrow = N, ncol=K)
for(a in 1:N){
for (k in 1:K){
if(sum(test.Z[a,,k])>0){
test.community.out[a,k]=1
}else if(sum(test.Z[,a,k])>0){
test.community.in[a,k]=1
}
else{
test.community.in[a,k]=test.community.out[a,k]=0
}
}
}
#length(which(community.in[,1]==1))
length(intersect(which(test.community.in[,1]==1), which(community.in[,1]==1)))/
length(which(test.community.in[,1]==1))
#length(which(community.in[,2]==1))
length(intersect(which(test.community.in[,2]==1), which(community.in[,2]==1)))/
length(which(test.community.in[,2]==1))
#length(which(community.in[,3]==1))
length(intersect(which(test.community.in[,3]==1), which(community.in[,3]==1)))/
length(which(test.community.in[,3]==1))
#length(which(community.in[,4]==1))
length(intersect(which(test.community.in[,4]==1), which(community.in[,4]==1)))/
length(which(test.community.in[,4]==1))
#length(which(community.in[,5]==1))
length(intersect(which(test.community.in[,5]==1), which(community.in[,5]==1)))/
length(which(test.community.in[,5]==1))
plot.igraph(graph.adjacency(adj.matrix,mode = "undirected"),vertex.size=1,layout=layout_with_fr)
plot.igraph(graph.adjacency(test.Y,mode = "undirected"),vertex.size=1,layout=layout_with_fr)
g.intersect=intersection(graph.adjacency(test.Y,mode="undirected"), graph.adjacency(adj.matrix,mode="undirected"))
g.intersect=intersection(graph.adjacency(test.Y,mode="undirected"), graph.adjacency(adj.matrix,mode="undirected"))
plot.igraph(g.intersect,vertex.size=1,layout=layout_with_fr)
(sum(degree(g.intersect)))/sum(degree(graph.adjacency(adj.matrix,mode="undirected")))
